%$ clear all
clc, close all force, clear all

%% Set the data from the file (would read file but formatted as rich text so annoying to process file)
ASetosa = [5.1 3.5 1.4 0.2;...
    4.9 3.0 1.4 0.2;...
    4.7 3.2 1.3 0.2;...
    4.6 3.1 1.5 0.2;...
    5.0 3.6 1.4 0.2;...
    5.4 3.9 1.7 0.4;...
    4.6 3.4 1.4 0.3;...
    5.0 3.4 1.5 0.2;...
    4.4 2.9 1.4 0.2;...
    4.9 3.1 1.5 0.1;...
    5.4 3.7 1.5 0.2;...
    4.8 3.4 1.6 0.2;...
    4.8 3.0 1.4 0.1;...
    4.3 3.0 1.1 0.1;...
    5.8 4.0 1.2 0.2;...
    5.7 4.4 1.5 0.4;...
    5.4 3.9 1.3 0.4;...
    5.1 3.5 1.4 0.3;...
    5.7 3.8 1.7 0.3;...
    5.1 3.8 1.5 0.3;...
    5.4 3.4 1.7 0.2;...
    5.1 3.7 1.5 0.4;...
    4.6 3.6 1.0 0.2;...
    5.1 3.3 1.7 0.5;...
    4.8 3.4 1.9 0.2;...
    5.0 3.0 1.6 0.2;...
    5.0 3.4 1.6 0.4;...
    5.2 3.5 1.5 0.2;...
    5.2 3.4 1.4 0.2;...
    4.7 3.2 1.6 0.2;...
    4.8 3.1 1.6 0.2;...
    5.4 3.4 1.5 0.4;...
    5.2 4.1 1.5 0.1;...
    5.5 4.2 1.4 0.2;...
    4.9 3.1 1.5 0.2;...
    5.0 3.2 1.2 0.2;...
    5.5 3.5 1.3 0.2;...
    4.9 3.6 1.4 0.1;...
    4.4 3.0 1.3 0.2;...
    5.1 3.4 1.5 0.2;...
    5.0 3.5 1.3 0.3;...
    4.5 2.3 1.3 0.3;...
    4.4 3.2 1.3 0.2;...
    5.0 3.5 1.6 0.6;...
    5.1 3.8 1.9 0.4;...
    4.8 3.0 1.4 0.3;...
    5.1 3.8 1.6 0.2;...
    4.6 3.2 1.4 0.2;...
    5.3 3.7 1.5 0.2;...
    5.0 3.3 1.4 0.2];

AVersicolor = [7.0 3.2 4.7 1.4;...
    6.4 3.2 4.5 1.5;...
    6.9 3.1 4.9 1.5;...
    5.5 2.3 4.0 1.3;...
    6.5 2.8 4.6 1.5;...
    5.7 2.8 4.5 1.3;...
    6.3 3.3 4.7 1.6;...
    4.9 2.4 3.3 1.0;...
    6.6 2.9 4.6 1.3;...
    5.2 2.7 3.9 1.4;...
    5.0 2.0 3.5 1.0;...
    5.9 3.0 4.2 1.5;...
    6.0 2.2 4.0 1.0;...
    6.1 2.9 4.7 1.4;...
    5.6 2.9 3.6 1.3;...
    6.7 3.1 4.4 1.4;...
    5.6 3.0 4.5 1.5;...
    5.8 2.7 4.1 1.0;...
    6.2 2.2 4.5 1.5;...
    5.6 2.5 3.9 1.1;...
    5.9 3.2 4.8 1.8;...
    6.1 2.8 4.0 1.3;...
    6.3 2.5 4.9 1.5;...
    6.1 2.8 4.7 1.2;...
    6.4 2.9 4.3 1.3;...
    6.6 3.0 4.4 1.4;...
    6.8 2.8 4.8 1.4;...
    6.7 3.0 5.0 1.7;...
    6.0 2.9 4.5 1.5;...
    5.7 2.6 3.5 1.0;...
    5.5 2.4 3.8 1.1;...
    5.5 2.4 3.7 1.0;...
    5.8 2.7 3.9 1.2;...
    6.0 2.7 5.1 1.6;...
    5.4 3.0 4.5 1.5;...
    6.0 3.4 4.5 1.6;...
    6.7 3.1 4.7 1.5;...
    6.3 2.3 4.4 1.3;...
    5.6 3.0 4.1 1.3;...
    5.5 2.5 4.0 1.3;...
    5.5 2.6 4.4 1.2;...
    6.1 3.0 4.6 1.4;...
    5.8 2.6 4.0 1.2;...
    5.0 2.3 3.3 1.0;...
    5.6 2.7 4.2 1.3;...
    5.7 3.0 4.2 1.2;...
    5.7 2.9 4.2 1.3;...
    6.2 2.9 4.3 1.3;...
    5.1 2.5 3.0 1.1;...
    5.7 2.8 4.1 1.3];

AVirginica = [6.3 3.3 6.0 2.5;...
    5.8 2.7 5.1 1.9;...
    7.1 3.0 5.9 2.1;...
    6.3 2.9 5.6 1.8;...
    6.5 3.0 5.8 2.2;...
    7.6 3.0 6.6 2.1;...
    4.9 2.5 4.5 1.7;...
    7.3 2.9 6.3 1.8;...
    6.7 2.5 5.8 1.8;...
    7.2 3.6 6.1 2.5;...
    6.5 3.2 5.1 2.0;...
    6.4 2.7 5.3 1.9;...
    6.8 3.0 5.5 2.1;...
    5.7 2.5 5.0 2.0;...
    5.8 2.8 5.1 2.4;...
    6.4 3.2 5.3 2.3;...
    6.5 3.0 5.5 1.8;...
    7.7 3.8 6.7 2.2;...
    7.7 2.6 6.9 2.3;...
    6.0 2.2 5.0 1.5;...
    6.9 3.2 5.7 2.3;...
    5.6 2.8 4.9 2.0;...
    7.7 2.8 6.7 2.0;...
    6.3 2.7 4.9 1.8;...
    6.7 3.3 5.7 2.1;...
    7.2 3.2 6.0 1.8;...
    6.2 2.8 4.8 1.8;...
    6.1 3.0 4.9 1.8;...
    6.4 2.8 5.6 2.1;...
    7.2 3.0 5.8 1.6;...
    7.4 2.8 6.1 1.9;...
    7.9 3.8 6.4 2.0;...
    6.4 2.8 5.6 2.2;...
    6.3 2.8 5.1 1.5;...
    6.1 2.6 5.6 1.4;...
    7.7 3.0 6.1 2.3;...
    6.3 3.4 5.6 2.4;...
    6.4 3.1 5.5 1.8;...
    6.0 3.0 4.8 1.8;...
    6.9 3.1 5.4 2.1;...
    6.7 3.1 5.6 2.4;...
    6.9 3.1 5.1 2.3;...
    5.8 2.7 5.1 1.9;...
    6.8 3.2 5.9 2.3;...
    6.7 3.3 5.7 2.5;...
    6.7 3.0 5.2 2.3;...
    6.3 2.5 5.0 1.9;...
    6.5 3.0 5.2 2.0;...
    6.2 3.4 5.4 2.3;...
    5.9 3.0 5.1 1.8];

%% Create two classes with Iris Setosa as one and the rest as the other.

class1 = ASetosa(:,[1,2]);
class2 = cat(1, AVersicolor(:,[1,2]), AVirginica(:,[1,2]));

%% Plot data

figure, hold on;
plot(class1(:,1), class1(:,2), 'or', 'linewidth', 2);
plot(class2(:,1), class2(:,2), 'sb', 'linewidth', 2);
legend('Iris Setosa', 'Iris Versicolor and Virginica');
title('Raw data');

%% Find optimial plane

% finding optimal plane
w = find_fisher_opt_plane({class1;class2})';
wnorm = norm(w);
wcl1 = repmat(w, size(class1,1), 1);
wcl2 = repmat(w, size(class2,1), 1);
% project points onto plane passing through 0
cl1proj = class1 - repmat(sum(wcl1.*class1, 2),1,2) .* wcl1/wnorm;
cl2proj = class2 - repmat(sum(wcl2.*class2, 2),1,2) .* wcl2/wnorm;

% show plane with projected points
figure, hold on;
plot(cl1proj(:,1), cl1proj(:,2), 'or', 'linewidth', 2);
plot(cl2proj(:,1), cl2proj(:,2), 'sb', 'linewidth', 2);
data = cat(1,cl1proj,cl2proj);
xmin = min(data(:,1))-1; xmax = max(data(:,1))+1;
plot([xmin,xmax], -w(1)/w(2) * [xmin,xmax], '--k', 'linewidth', 2);
legend('Iris Setosa', 'Iris Versicolor and Virginica','w');
title('Projected data');

%% Change of basis so that data is shown just on x-plane

% find unit vector along the plane
x = 1 / sqrt(1 + w(1)^2 / w(2)^2);
uvec1 = [x, -w(1)/w(2) * x,0]; uvec2 = cross(uvec1, [0,0,1]);
uvec1 = uvec1([1,2]); uvec2 = uvec2([1,2]);

trans_mat = [uvec1', uvec2']; % column vectors with the two basis vectors of our new space
trans = cl1proj(1,:) * trans_mat;
% project points onto x axis using transformation matrix
% Basically this code just uses cells to speed up the process of
% transforming each individual feature vector.  Moreover it makes the code
% nice and terse.
tmp = cell(size(cl1proj,1),1); tmp(:) = {trans_mat}; % cell matrix containing n1 copies of the transformation matrix
cl1proj2 = cellfun(@(a,b) a*b, mat2cell(cl1proj,ones(size(cl1proj,1),1),[size(cl1proj,2)]), tmp, 'uniformoutput', false);
cl1proj2 = cell2mat(cl1proj2);

tmp = cell(size(cl2proj,1),1); tmp(:) = {trans_mat};
cl2proj2 = cellfun(@(a,b) a*b, mat2cell(cl2proj,ones(size(cl2proj,1),1),[size(cl2proj,2)]), tmp, 'uniformoutput', false);
cl2proj2 = cell2mat(cl2proj2);

%% Plot newly projected points (again)

% show plane with projected points
figure, hold on;
plot(cl1proj2(:,1), cl1proj2(:,2), 'or', 'linewidth', 2);
plot(cl2proj2(:,1), cl2proj2(:,2), 'sb', 'linewidth', 2);
data = cat(1,cl1proj2,cl2proj2);
title('Projected data');

%% Calculate Normal distributions for newly projected classes

class1_1d = cl1proj2(:,1); class2_1d = cl2proj2(:,1); % only the x dimension

mean1 = mean(class1_1d); std1 = std(class1_1d);
mean2 = mean(class2_1d); std2 = std(class2_1d);

f = @(x,mean,std) 1/(std*sqrt(2*pi)) * exp(-0.5 * (x - mean).^2 / std^2);

xmin = min(cat(1, class1_1d, class2_1d)) - 1;  xmax = max(cat(1, class1_1d, class2_1d)) + 1;
xx = linspace(xmin,xmax,300);

%% Plot distributions on top of data
plot(xx, f(xx, mean1, std1), 'r'); plot(xx, f(xx, mean2, std2), 'b');
legend('Iris Setosa', 'Iris Versicolor and Virginica', 'Normal distribution for class 1', 'Normal distribution for class 2');

%% Find the threshold point (i.e. where the two normal distributions cross)

f_findzero = @(x) f(x, mean1, std1) - f(x, mean2, std2);
thresh = fzero(f_findzero, [0]);

%% Plot threshold on top of data

plot([thresh,thresh], [-0.5,2], '--k', 'linewidth', 2);
legend('Iris Setosa',...
    'Iris Versicolor and Virginica',...
    'Normal distribution for class 1',...
    'Normal distribution for class 2',...
    'Threshold');

%% Calculate classification error

all_data = cat(1, class1_1d, class2_1d);

% labels, 0 if in class with mean smaller than tresh and 1 otherwise
if mean1 > mean2
    labels = cat(1, ones(length(class1_1d),1), zeros(length(class2_1d),1));
else
    labels = cat(1, zeros(length(class1_1d),1), ones(length(class2_1d),1));
end

classify = all_data >= thresh; % classify (i.e. get bool value of whether bigger than thresh)
err = classify ~= labels; % check if label and classification don't match
err = sum(err) / length(err); % count number of misclassified features
display(['Classification error is ' num2str(err) ]);